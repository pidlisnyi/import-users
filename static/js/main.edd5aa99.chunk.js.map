{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","users","setUsers","inputFileRef","useRef","undefined","className","ref","style","display","type","accept","onChange","reader","FileReader","onload","result","id","name","console","log","current","files","readAsText","onClick","click","map","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAqDeA,MAlDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAEPC,EAAeC,sBAAOC,GAwB5B,OACE,sBAAKC,UAAU,MAAf,UACE,uBACEC,IAAKJ,EACLK,MAAO,CAAEC,QAAS,QAClBC,KAAK,OACLC,OAAO,OACPC,SAnBe,WACnB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,WACd,IAAMd,GAAwBY,EAAOG,OAZhC,CACL,CACEC,GAAI,EACJC,KAAM,YAURhB,EAASD,IAGXkB,QAAQC,IAAIjB,EAAakB,QAAQC,MAAM,IACvCT,EAAOU,WAAWpB,EAAakB,QAAQC,MAAM,OAa3C,wBAAQE,QAAS,WACfrB,EAAakB,QAAQI,SADvB,0BAICxB,EAAMyB,KAAI,SAACC,GAAD,OACT,gCACE,4BAAIA,EAAKV,KACT,4BAAIU,EAAKT,SAFDS,EAAKV,WChCRW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.edd5aa99.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useRef } from \"react\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const inputFileRef = useRef(undefined);\n\n  const getUsersFromCsv = (result) => {\n    // do something to get users from string\n    return [\n      {\n        id: 1,\n        name: \"Andrii\",\n      },\n    ]; // [{ id: 1, name: \"Greg\"}];\n  };\n\n  const handleChange = () => {\n    const reader = new FileReader();\n\n    reader.onload = function () {\n      const users = getUsersFromCsv(reader.result); // \"\"\n      setUsers(users);\n    };\n\n    console.log(inputFileRef.current.files[0])\n    reader.readAsText(inputFileRef.current.files[0]);\n  };\n\n  return (\n    <div className=\"App\">\n      <input\n        ref={inputFileRef}\n        style={{ display: \"none\" }}\n        type=\"file\"\n        accept=\".csv\"\n        onChange={handleChange}\n      />\n\n      <button onClick={() => {\n        inputFileRef.current.click()\n      }}>Import users</button>\n\n      {users.map((user) => (\n        <div key={user.id}>\n          <p>{user.id}</p>\n          <p>{user.name}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}